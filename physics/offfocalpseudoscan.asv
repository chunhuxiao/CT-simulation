function Aoff = offfocalpseudoscan(SYS, P)
% off-focal (pseudo) simulation base on convolution method (offfocalconv.m)
% only for Axial now
% Aoff = offfocalpseudoscan(SYS, P);
% e.g. Dataflow.P{iw} = Dataflow.P{iw}-offfocalpseudoscan(SYS, Dataflow.P{iw});
% where the P{iw} is the output of projectionscan.m and reshaped like (Nps * Nview).

% only for Axial
if ~strcmpi(SYS.protocol.scan, 'Axial')
    warning('Off-focal simulation is not supported in %s scan now! sorry', SYS.protocol.scan);
    Aoff = [];
    return
end

% paramters to use
offwidth = SYS.source.offfocalwidth;
offintensity = SYS.source.offfocalintensity;
focalposition = SYS.source.focalposition;
Nfocal = SYS.source.focalnumber;
Npixel = double(SYS.detector.Npixel);
Nslice = double(SYS.detector.Nslice);
Nviewprot = SYS.protocol.viewperrot;
Nshot = SYS.protocol.shotnumber;
% if air
Nviewprot = max(Nviewprot, size(P, 2));


% slice weight
w_slice = weightofslicemerge(SYS.detector);

% ini output
Aoff = zeros(size(P));

% fly focal
for ishot = 1:Nshot
    for ifocal = 1:Nfocal
        % get the views
        viewindex = (ifocal:Nfocal:Nviewprot) + (ishot-1)*Nviewprot;
        A_ii = P(:, viewindex);
        % mean on slice
        A_ii = sum(reshape(A_ii, Npixel, Nslice, []), 2)./sum(w_slice);
        % off-focal convolution
        A_ii = offfocalconv(A_ii, SYS.detector, focalposition(ifocal, :), Nviewprot/Nfocal, offwidth, offintensity);
        A_ii = reshape(A_ii(:)*w_slice, 
    
    end
end
            


end