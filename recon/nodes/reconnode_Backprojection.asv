function [dataflow, prmflow, status] = reconnode_Backprojection(dataflow, prmflow, status)
% recon node, BP (after filter)
% [dataflow, prmflow, status] = reconnode_Backprojection(dataflow, prmflow, status);


% BP parameter
Nshot = prmflow.recon.Nshot;
Nviewprot = prmflow.recon.Nviewprot;
delta_view = prmflow.recon.delta_view;
startviewangle = prmflow.recon.startviewangle;
Nslice = prmflow.recon.Nslice;
midchannel = prmflow.recon.midchannel;
delta_d = prmflow.recon.delta_d;
if isfield(prmflow.recon, 'FOV')
    FOV = prmflow.recon.FOV;
else
    FOV = 500;
end
if isfield(prmflow.recon, 'imagesize')
    N = prmflow.recon.imagesize;
end
if isfield(prmflow.recon, 'interp')
    interp = prmflow.recon.interp;
else
    interp = 'linear';
end
hond = FOV/N/delta_d;
% view angles
% theta = double(dataflow.rawhead.viewangle);




dataflow.image = zeros(N, N, Nslice*recon.Nshot, 'single');
for ishot = 1 : Nshot
    recon.viewangle = (0:Nviewprot-1).*delta_view + startviewangle(ishot);
    sliceindex = (1:recon.Nslice) + (ishot-1).*recon.Nslice;
    p = reshape(p, [], projprm.Nslice, projprm.Nview);
    dataflow.image(:,:, sliceindex) = backproj2D_1(p, theta, midchannel, hond, N, interp);
    dataflow.image(:,:, sliceindex) = filterbackproj2D(squeeze(dataflow.rawdata(:, :, :, ishot)), recon, myfilter);
    
end

% status
status.jobdone = true;
status.errorcode = 0;
status.errormsg = [];
end