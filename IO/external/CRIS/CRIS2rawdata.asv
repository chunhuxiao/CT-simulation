function CRIS2rawdata(pdfile, outpath, CRISpath, cfgpath, versionflag)
% trans .pd rawdata to .raw
% CRIS2rawdata(pdfile, outpath, CRISpath, cfgpath, versionflag);
% INPUT:
%   pdfile          filename for a cell of filenames
%   outpath         output path
%   CRISpath        external IO platform
%   cfgpath         ~\IO\standard\
%   versionflag     version, e.g. 'v1.0'

% default inputs
if nargin<2
    outpath = '';
end
if nargin<3
    CRISpath = '';
end
if nargin<4
    cfgpath = '';
end
if nargin<5
    versionflag = '';
end

% loop multi files
if iscell(pdfile)
    % recurse
    for ii = 1:length(pdfile)
         CRIS2rawdata(pdfile{ii}, outpath, CRISpath, cfgpath, versionflag)
    end
    return;
end

% parts in input file
[pdpath, pdname, ~] = fileparts(pdfile);

if isempty(outpath)
    % default output path is the orig path
    outpath = pdpath;
end

if isempty(CRISpath)
    % default CRIS path
    CRISpath = 'E:\matlab\CRIS';
    % I know it is
end

if isempty(versionflag)
    versionflag = 'v1.0';
end

% read data
dataflow = CRIS2dataflow(pdfile, CRISpath);

% dataflow to rawdata file
% values to put in rawdata 
% data version
versionstr = regexp(versionflag, '(\.\d+)|(v\d+)', 'match');
rawdataversion = [str2double(versionstr{1}(2:end)), str2double(versionstr{2}(2:end))];
% status
statusflag = hex2dec('8000');

Nview = length(dataflow.head.viewangle(:));
raw = struct();
raw(Nview) = struct();

[raw(:).Package_Version] = deal(rawdataversion);
[raw(:).Status_Flag] = deal(statusflag);
[raw(:).Series_Number] = deal(1);
[raw(:).Shot_Number] = deal(1);
[raw(:).Reading_Number] = num2cell(dataflow.rawhead.Reading_Number, 1);
[raw(:).Angle_encoder] = num2cell(dataflow.rawhead.Angle_encoder, 1);
[raw(:).Integration_Time] = num2cell(dataflow.rawhead.Integration_Time, 1);
[raw(:).KV] = num2cell(dataflow.rawhead.KV, 1);
[raw(:).mA] = num2cell(dataflow.rawhead.mA, 1);
    [raw{iw}(:).Start_Slice] = deal(startslice);
    [raw{iw}(:).End_Slice] = deal(endslice);
    [raw{iw}(:).Slice_merge] = deal(slicemerge);
    [raw{iw}(:).Slice_Number] = deal(slicenumber);
    [raw{iw}(:).Raw_Data_Size] = deal(rawdatasize);
    [raw{iw}(:).Raw_Data] = Raw_Data{:};

end